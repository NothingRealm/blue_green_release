---

- name: ensure facts.d dir exists
  file:
    path: /etc/ansible/facts.d
    state: directory



- name: Checks that directories variable are set
  fail: msg="'blue_green' dict variable is not set."
  when: blue_green is not defined



- name: reread ansible_local facts
  setup:
    filter: ansible_local



- name: check if run for the first time
  set_fact:
    first_run: "{{ 'no' if ansible_local[app_name] is defined else 'yes' }}"



- name: store host facts
  blockinfile:
    dest: /etc/ansible/facts.d/{{ app_name }}.fact
    marker: "{mark}"
    marker_begin: '{'
    marker_end: '}'
    create: yes
    block: |
        "color": "{{ blue_green.blue.name }}",
        "version": "{{ blue_green.blue.image_version }}",
        "p_color": "{{ blue_green.green.name }}",
        "p_version": "{{ blue_green.green.image_version }}"
  when:
    - first_run



- name: reread ansible_local facts
  setup:
    filter: ansible_local
  when: first_run



- name: set color of ongoing deployment
  set_fact:
    current_color: "{{ ansible_local[app_name].p_color }}"



- name: deploy app
  docker_container:
    name: "{{ app_name }}_{{ current_color }}"
    state: started
    ports: "{{ blue_green[current_color].port }}:3000"
    image: "{{ image_name }}:{{ image_version }}"
    restart_policy: unless-stopped
  register: _app_deployment


- name: perform healthcheck on deployed containers
  uri:
    url: "{{ 'http://127.0.0.1' + ':' + blue_green[current_color].port + healthcheck_path }}"
    method: GET
    status_code: 200
  retries: 10
  delay: 5
  register: healthcheck_result
  until: healthcheck_result.failed is defined
  changed_when: False



- name: generate nginx config for the application
  template:
    src: cloud.j2
    dest: "/etc/nginx/conf.d/{{ app_name }}.conf"
    backup: yes
  when: healthcheck_result.failed is not defined
  register: _nginx_config
  notify:
    - check nginx configuration
    - reload nginx



- name: Update state
  blockinfile:
    dest: /etc/ansible/facts.d/{{ app_name }}.fact
    marker: "{mark}"
    marker_begin: '{'
    marker_end: '}'
    create: yes
    block: |
        "color": "{{ current_color }}",
        "version": "{{ image_version }}",
        "p_color": "{{ ansible_local[app_name].color }}",
        "p_version": "{{ ansible_local[app_name].version }}"
  when: healthcheck_result.failed is not defined



- name: debug
  debug:
    msg: "{{ current_color }}"

